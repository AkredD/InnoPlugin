/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.inno.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.inno.plugin.psi.SimpleTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Inno.flex</tt>
 */
class SimpleLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\60\1\0\1\57\5\0\1\61\1\62\1\5\1\45\1\63\1\46"+
    "\1\21\1\4\12\6\1\44\1\0\1\47\1\51\1\50\2\0\1\24\1\73\1\30\1\22\1\14\1\54\1"+
    "\7\1\70\1\23\1\7\1\74\1\11\1\40\1\31\1\12\1\17\1\7\1\15\1\32\1\20\1\16\1\66"+
    "\1\13\1\7\1\37\1\7\6\0\1\26\1\75\1\33\1\25\1\42\1\55\1\10\1\72\1\65\1\10\1"+
    "\76\1\56\1\43\1\35\1\34\1\64\1\10\1\52\1\36\1\27\1\53\1\67\1\71\1\10\1\41"+
    "\1\10\12\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\6\4"+
    "\1\6\3\4\3\5\3\4\5\5\2\1\2\7\1\10"+
    "\1\5\1\4\1\5\1\1\1\11\1\12\1\13\2\5"+
    "\1\4\2\5\1\4\1\5\4\0\1\14\11\4\1\15"+
    "\1\4\4\5\4\4\1\5\1\14\6\5\1\16\1\17"+
    "\1\20\1\7\1\14\1\5\2\4\2\5\2\0\1\21"+
    "\1\5\1\15\1\4\3\5\1\4\1\5\1\0\1\3"+
    "\1\0\1\3\3\4\1\22\5\4\3\5\1\4\1\23"+
    "\2\4\1\5\1\23\3\5\1\22\2\5\2\4\2\5"+
    "\1\0\1\5\1\4\3\5\1\4\1\5\1\2\2\4"+
    "\1\24\2\4\1\25\1\26\1\4\1\5\1\26\1\25"+
    "\5\4\2\5\1\27\3\5\1\24\1\5\1\4\1\5"+
    "\1\0\1\5\1\4\3\5\1\4\1\5\1\30\1\31"+
    "\2\4\1\32\2\4\1\33\2\4\3\5\1\33\2\5"+
    "\1\4\1\5\1\0\1\5\1\4\1\5\1\30\1\31"+
    "\2\34\1\35\1\36\2\4\1\37\1\4\2\5\1\37"+
    "\1\5\1\35\1\4\1\5\1\0\1\36\2\40\2\4"+
    "\1\41\2\5\1\4\1\5\1\0\1\42\1\4\1\42"+
    "\1\5\2\43\1\0\1\44\3\0\1\45\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\176\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\176\0\176"+
    "\0\176\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\176\0\u0ad4\0\u0b13\0\u0b52\0\u017a\0\u0b91\0\u0bd0\0\u0c0f"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u017a\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u01b9\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\176\0\176\0\176\0\176\0\176\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u12f3\0\u1371\0\u01b9\0\u13b0"+
    "\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u1569"+
    "\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u017a\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u017a\0\u18db"+
    "\0\u191a\0\u1959\0\u01b9\0\u1998\0\u19d7\0\u1a16\0\u01b9\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u0ad4\0\u1dc7\0\u1e06"+
    "\0\u017a\0\u1e45\0\u1e84\0\u017a\0\u017a\0\u1ec3\0\u1f02\0\u01b9"+
    "\0\u01b9\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb"+
    "\0\u01b9\0\u20fa\0\u2139\0\u2178\0\u01b9\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d"+
    "\0\u017a\0\u017a\0\u246c\0\u24ab\0\176\0\u24ea\0\u2529\0\u017a"+
    "\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u01b9\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u01b9\0\u01b9"+
    "\0\u017a\0\u01b9\0\u017a\0\u017a\0\u289b\0\u28da\0\u017a\0\u2919"+
    "\0\u2958\0\u2997\0\u01b9\0\u29d6\0\u01b9\0\u2a15\0\u2a54\0\u2a93"+
    "\0\u01b9\0\u017a\0\u01b9\0\u2ad2\0\u2b11\0\176\0\u2b50\0\u2b8f"+
    "\0\u2bce\0\u2c0d\0\u2c4c\0\u017a\0\u2c8b\0\u01b9\0\u2cca\0\u017a"+
    "\0\u01b9\0\u2d09\0\176\0\u2d48\0\u2d87\0\u2dc6\0\u12f3\0\u2e05"+
    "\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd"+
    "\0\u303c\0\u307b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\2\4\1\5\1\3\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\7\1\10\1\35"+
    "\1\10\1\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\10\1\44\1\45\1\10\1\46\1\4\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\7\1\56\1\10"+
    "\1\57\1\7\1\60\1\10\77\3\101\0\2\4\54\0"+
    "\1\4\22\0\1\61\1\62\77\0\1\6\5\0\1\63"+
    "\4\0\1\64\20\0\1\63\42\0\13\7\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\10\1\0\22\10"+
    "\6\0\5\10\5\0\13\10\6\0\7\7\1\65\3\7"+
    "\1\0\22\7\6\0\5\7\5\0\13\7\6\0\7\7"+
    "\1\66\3\7\1\0\22\7\6\0\5\7\5\0\4\7"+
    "\1\67\6\7\6\0\3\7\1\70\7\7\1\0\7\7"+
    "\1\71\12\7\6\0\5\7\5\0\13\7\6\0\6\7"+
    "\1\72\4\7\1\0\22\7\6\0\5\7\5\0\13\7"+
    "\6\0\13\7\1\0\2\7\1\73\17\7\6\0\5\7"+
    "\5\0\13\7\6\0\7\7\1\74\3\7\1\0\15\7"+
    "\1\75\4\7\6\0\5\7\5\0\13\7\6\0\13\7"+
    "\1\0\2\7\1\76\17\7\6\0\5\7\5\0\13\7"+
    "\6\0\13\7\1\0\22\7\6\0\2\7\1\77\2\7"+
    "\5\0\13\7\6\0\13\7\1\0\7\7\1\100\12\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\10\1\0\4\10"+
    "\1\101\15\10\6\0\5\10\5\0\13\10\6\0\13\10"+
    "\1\0\13\10\1\102\6\10\6\0\5\10\5\0\13\10"+
    "\6\0\13\10\1\0\17\10\1\103\2\10\6\0\1\104"+
    "\4\10\5\0\13\10\6\0\4\7\1\105\6\7\1\0"+
    "\22\7\6\0\5\7\5\0\13\7\6\0\4\7\1\106"+
    "\6\7\1\0\22\7\6\0\5\7\5\0\13\7\6\0"+
    "\12\7\1\107\1\0\15\7\1\110\4\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\10\1\0\12\10\1\111\7\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\10\1\0\22\10"+
    "\6\0\1\112\4\10\5\0\13\10\6\0\13\10\1\0"+
    "\12\10\1\113\7\10\6\0\1\10\1\114\3\10\5\0"+
    "\13\10\6\0\13\10\1\0\5\10\1\115\11\10\1\116"+
    "\2\10\6\0\5\10\5\0\13\10\6\0\13\10\1\0"+
    "\13\10\1\117\6\10\6\0\4\10\1\120\5\0\13\10"+
    "\45\0\1\121\3\0\1\122\73\0\1\121\2\0\1\123"+
    "\75\0\2\124\76\0\1\124\76\0\1\125\33\0\13\10"+
    "\1\0\20\10\1\126\1\10\6\0\5\10\5\0\13\10"+
    "\6\0\10\7\1\127\2\7\1\0\2\7\1\130\17\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\10\1\0\4\10"+
    "\1\131\15\10\6\0\1\10\1\132\3\10\5\0\13\10"+
    "\1\133\2\0\3\133\1\134\50\133\1\135\17\133\6\0"+
    "\13\10\1\0\4\10\1\136\15\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\22\10\6\0\3\10\1\137"+
    "\1\10\5\0\13\10\6\0\13\7\1\0\2\7\1\140"+
    "\17\7\6\0\5\7\5\0\13\7\6\0\13\10\1\0"+
    "\4\10\1\141\15\10\6\0\5\10\5\0\13\10\6\0"+
    "\13\10\1\0\22\10\6\0\1\142\4\10\5\0\6\10"+
    "\1\143\4\10\6\0\7\7\1\144\3\7\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\10\1\0\22\10"+
    "\6\0\1\145\4\10\5\0\13\10\1\62\2\0\2\62"+
    "\1\146\71\62\6\0\1\147\36\0\2\150\36\0\1\151"+
    "\76\0\13\7\1\0\1\7\1\152\20\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\7\1\0\1\7\1\153\20\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\7\1\0\10\7"+
    "\1\154\11\7\6\0\5\7\5\0\13\7\6\0\13\7"+
    "\1\0\1\155\21\7\6\0\5\7\5\0\13\7\6\0"+
    "\12\7\1\156\1\0\22\7\6\0\5\7\5\0\13\7"+
    "\6\0\7\7\1\157\3\7\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\10\7\1\160\2\7\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\11\7\1\161\1\7"+
    "\1\0\22\7\6\0\5\7\5\0\13\7\6\0\12\7"+
    "\1\162\1\0\22\7\6\0\5\7\5\0\13\7\6\0"+
    "\13\7\1\0\1\65\21\7\6\0\5\7\5\0\13\7"+
    "\6\0\13\10\1\0\5\10\1\163\14\10\6\0\5\10"+
    "\5\0\13\10\6\0\13\10\1\0\3\10\1\112\16\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\10\1\0\22\10"+
    "\6\0\5\10\5\0\1\164\12\10\6\0\13\10\1\0"+
    "\22\10\6\0\1\10\1\165\3\10\5\0\13\10\6\0"+
    "\13\7\1\0\7\7\1\166\12\7\6\0\5\7\5\0"+
    "\13\7\6\0\12\7\1\167\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\7\1\0\2\7\1\170\17\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\7\1\0\10\7"+
    "\1\171\11\7\6\0\5\7\5\0\13\7\6\0\13\10"+
    "\1\0\13\10\1\172\6\10\6\0\5\10\5\0\13\10"+
    "\6\0\13\10\1\0\5\10\1\173\14\10\6\0\5\10"+
    "\5\0\13\10\6\0\13\10\1\0\22\10\6\0\4\10"+
    "\1\174\5\0\13\10\6\0\13\10\1\0\4\10\1\175"+
    "\15\10\6\0\5\10\5\0\13\10\6\0\13\10\1\0"+
    "\14\10\1\176\5\10\6\0\5\10\5\0\13\10\6\0"+
    "\13\10\1\0\3\10\1\177\16\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\14\10\1\200\5\10\6\0"+
    "\5\10\5\0\13\10\6\0\13\10\1\0\5\10\1\201"+
    "\14\10\6\0\5\10\5\0\13\10\6\0\13\7\1\0"+
    "\7\7\1\202\12\7\6\0\5\7\5\0\13\7\6\0"+
    "\3\7\1\203\7\7\1\0\22\7\6\0\5\7\5\0"+
    "\13\7\6\0\13\10\1\0\22\10\6\0\4\10\1\204"+
    "\5\0\13\10\6\0\13\10\1\0\13\10\1\205\6\10"+
    "\6\0\5\10\5\0\13\10\1\133\2\0\54\133\1\135"+
    "\20\133\2\0\3\133\1\206\50\133\1\135\17\133\6\0"+
    "\13\10\1\0\22\10\6\0\1\207\4\10\5\0\13\10"+
    "\6\0\3\7\1\210\7\7\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\10\1\0\22\10\6\0\4\10"+
    "\1\211\5\0\13\10\6\0\13\10\1\0\22\10\6\0"+
    "\5\10\5\0\1\10\1\212\11\10\6\0\13\10\1\0"+
    "\22\10\6\0\5\10\5\0\1\10\1\213\11\10\6\0"+
    "\6\7\1\214\4\7\1\0\22\7\6\0\5\7\5\0"+
    "\13\7\6\0\13\10\1\0\20\10\1\215\1\10\6\0"+
    "\5\10\5\0\13\10\1\62\2\0\1\62\1\216\1\146"+
    "\71\62\6\0\1\147\76\0\1\151\5\0\1\63\25\0"+
    "\1\63\42\0\12\7\1\217\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\3\7\1\220\7\7\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\6\7\1\221\4\7"+
    "\1\0\22\7\6\0\5\7\5\0\13\7\6\0\10\7"+
    "\1\222\2\7\1\0\22\7\6\0\5\7\5\0\13\7"+
    "\6\0\6\7\1\223\4\7\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\6\7\1\224\4\7\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\6\7\1\225\4\7"+
    "\1\0\22\7\6\0\5\7\5\0\13\7\6\0\13\7"+
    "\1\0\2\7\1\226\17\7\6\0\5\7\5\0\13\7"+
    "\6\0\13\10\1\0\4\10\1\227\15\10\6\0\5\10"+
    "\5\0\13\10\6\0\13\10\1\0\20\10\1\230\1\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\10\1\0\20\10"+
    "\1\231\1\10\6\0\5\10\5\0\13\10\6\0\12\7"+
    "\1\232\1\0\10\7\1\233\11\7\6\0\5\7\5\0"+
    "\13\7\6\0\7\7\1\234\2\7\1\235\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\12\7\1\236\1\0"+
    "\22\7\6\0\5\7\5\0\13\7\6\0\13\10\1\0"+
    "\5\10\1\237\6\10\1\240\5\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\22\10\6\0\4\10\1\241"+
    "\5\0\13\10\6\0\13\10\1\0\5\10\1\242\14\10"+
    "\6\0\1\243\4\10\5\0\13\10\6\0\13\10\1\0"+
    "\5\10\1\244\14\10\6\0\5\10\5\0\13\10\6\0"+
    "\13\10\1\0\20\10\1\245\1\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\22\10\6\0\1\10\1\246"+
    "\3\10\5\0\13\10\6\0\13\7\1\0\6\7\1\247"+
    "\13\7\6\0\5\7\5\0\13\7\6\0\13\7\1\0"+
    "\10\7\1\160\11\7\6\0\5\7\5\0\13\7\6\0"+
    "\13\10\1\0\14\10\1\165\5\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\11\10\1\250\10\10\6\0"+
    "\5\10\5\0\13\10\1\133\2\0\3\133\1\251\50\133"+
    "\1\135\17\133\6\0\13\10\1\0\20\10\1\252\1\10"+
    "\6\0\5\10\5\0\13\10\6\0\10\7\1\253\2\7"+
    "\1\0\22\7\6\0\5\7\5\0\13\7\6\0\13\10"+
    "\1\0\22\10\6\0\1\10\1\254\3\10\5\0\13\10"+
    "\6\0\13\10\1\0\5\10\1\255\14\10\6\0\5\10"+
    "\5\0\13\10\6\0\13\10\1\0\22\10\6\0\4\10"+
    "\1\256\5\0\13\10\6\0\13\7\1\0\2\7\1\257"+
    "\17\7\6\0\5\7\5\0\13\7\6\0\13\10\1\0"+
    "\4\10\1\260\15\10\6\0\5\10\5\0\13\10\6\0"+
    "\6\7\1\261\4\7\1\0\22\7\6\0\5\7\5\0"+
    "\13\7\6\0\6\7\1\262\4\7\1\0\22\7\6\0"+
    "\5\7\5\0\13\7\6\0\7\7\1\263\3\7\1\0"+
    "\22\7\6\0\5\7\5\0\13\7\6\0\13\7\1\0"+
    "\7\7\1\264\12\7\6\0\5\7\5\0\13\7\6\0"+
    "\13\7\1\0\22\7\1\265\5\0\5\7\5\0\13\7"+
    "\6\0\13\10\1\0\22\10\1\265\5\0\5\10\5\0"+
    "\13\10\6\0\13\7\1\0\1\7\1\266\20\7\6\0"+
    "\5\7\5\0\13\7\6\0\12\7\1\267\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\12\7\1\270\1\0"+
    "\22\7\6\0\5\7\5\0\13\7\6\0\13\7\1\0"+
    "\1\7\1\271\20\7\6\0\5\7\5\0\13\7\6\0"+
    "\6\7\1\272\4\7\1\0\22\7\6\0\5\7\5\0"+
    "\13\7\6\0\13\10\1\0\22\10\6\0\5\10\5\0"+
    "\1\10\1\273\11\10\6\0\13\10\1\0\5\10\1\274"+
    "\14\10\6\0\5\10\5\0\13\10\6\0\13\10\1\0"+
    "\22\10\6\0\5\10\5\0\1\10\1\275\11\10\6\0"+
    "\13\10\1\0\5\10\1\276\14\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\20\10\1\277\1\10\6\0"+
    "\5\10\5\0\13\10\6\0\13\10\1\0\22\10\6\0"+
    "\1\300\4\10\5\0\13\10\6\0\12\7\1\301\1\0"+
    "\22\7\6\0\5\7\5\0\13\7\6\0\13\10\1\0"+
    "\5\10\1\302\14\10\6\0\5\10\5\0\13\10\1\133"+
    "\2\0\3\133\1\303\50\133\1\135\17\133\6\0\13\10"+
    "\1\0\13\10\1\304\6\10\6\0\5\10\5\0\13\10"+
    "\6\0\6\7\1\305\4\7\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\10\1\0\20\10\1\306\1\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\10\1\0\20\10"+
    "\1\307\1\10\6\0\5\10\5\0\13\10\6\0\13\10"+
    "\1\0\20\10\1\310\1\10\6\0\5\10\5\0\13\10"+
    "\6\0\13\7\1\0\22\7\6\0\5\7\5\0\10\7"+
    "\1\311\2\7\6\0\13\10\1\0\22\10\6\0\5\10"+
    "\5\0\12\10\1\312\6\0\13\7\1\0\7\7\1\313"+
    "\12\7\6\0\5\7\5\0\13\7\6\0\12\7\1\314"+
    "\1\0\22\7\6\0\5\7\5\0\13\7\6\0\13\7"+
    "\1\0\7\7\1\315\12\7\6\0\5\7\5\0\13\7"+
    "\6\0\13\7\1\0\2\7\1\316\17\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\7\1\0\6\7\1\317\13\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\7\1\0\16\7"+
    "\1\320\3\7\6\0\5\7\5\0\13\7\6\0\13\10"+
    "\1\0\13\10\1\321\6\10\6\0\5\10\5\0\13\10"+
    "\6\0\13\10\1\0\4\10\1\322\15\10\6\0\5\10"+
    "\5\0\13\10\6\0\13\10\1\0\11\10\1\323\10\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\10\1\0\21\10"+
    "\1\324\6\0\5\10\5\0\13\10\6\0\13\10\1\0"+
    "\13\10\1\325\6\10\6\0\5\10\5\0\13\10\6\0"+
    "\13\7\1\0\1\7\1\326\20\7\6\0\5\7\5\0"+
    "\13\7\6\0\13\10\1\0\22\10\6\0\5\10\5\0"+
    "\1\10\1\327\11\10\1\133\2\0\43\133\1\330\10\133"+
    "\1\135\17\133\6\0\13\10\1\0\5\10\1\331\14\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\7\1\0\10\7"+
    "\1\332\11\7\6\0\5\7\5\0\13\7\6\0\13\10"+
    "\1\0\14\10\1\333\5\10\6\0\5\10\5\0\13\10"+
    "\6\0\10\7\1\334\2\7\1\0\22\7\6\0\5\7"+
    "\5\0\13\7\6\0\13\7\1\0\7\7\1\335\12\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\7\1\0\22\7"+
    "\1\336\5\0\5\7\5\0\13\7\6\0\13\10\1\0"+
    "\22\10\6\0\1\10\1\337\3\10\5\0\13\10\6\0"+
    "\13\10\1\0\13\10\1\340\6\10\6\0\5\10\5\0"+
    "\13\10\6\0\13\10\1\0\22\10\1\336\5\0\5\10"+
    "\5\0\13\10\6\0\4\7\1\341\6\7\1\0\22\7"+
    "\6\0\5\7\5\0\13\7\6\0\13\10\1\0\12\10"+
    "\1\342\7\10\6\0\5\10\5\0\13\10\1\133\2\0"+
    "\3\133\1\343\50\133\1\135\17\133\6\0\6\7\1\344"+
    "\4\7\1\0\22\7\6\0\5\7\5\0\13\7\6\0"+
    "\12\7\1\345\1\0\22\7\6\0\5\7\5\0\13\7"+
    "\6\0\13\10\1\0\20\10\1\346\1\10\6\0\5\10"+
    "\5\0\13\10\6\0\13\10\1\0\5\10\1\347\14\10"+
    "\6\0\5\10\5\0\13\10\6\0\13\7\1\0\7\7"+
    "\1\350\12\7\6\0\5\7\5\0\13\7\6\0\13\10"+
    "\1\0\13\10\1\351\6\10\6\0\5\10\5\0\13\10"+
    "\1\133\2\0\3\133\1\352\50\133\1\135\17\133\6\0"+
    "\13\7\1\0\22\7\1\353\5\0\5\7\5\0\13\7"+
    "\6\0\13\10\1\0\22\10\1\353\5\0\5\10\5\0"+
    "\13\10\1\133\2\0\43\133\1\354\10\133\1\135\20\133"+
    "\2\0\3\133\1\355\50\133\1\135\20\133\2\0\3\133"+
    "\1\356\50\133\1\135\20\133\2\0\54\133\1\357\1\360"+
    "\17\133\2\0\3\133\1\361\50\133\1\135\20\133\2\0"+
    "\3\133\1\362\50\133\1\135\20\133\2\0\46\133\1\363"+
    "\5\133\1\135\20\133\2\0\3\133\1\364\50\133\1\135"+
    "\20\133\2\0\3\133\1\365\50\133\1\135\20\133\2\0"+
    "\46\133\1\366\5\133\1\135\20\133\2\0\3\133\1\367"+
    "\50\133\1\135\20\133\2\0\3\133\1\370\50\133\1\135"+
    "\20\133\2\0\16\133\1\371\35\133\1\357\20\133\2\0"+
    "\3\133\1\372\50\133\1\135\20\133\2\0\3\133\1\372"+
    "\50\133\1\357\17\133";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12474];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\13\1\1\11\27\1\3\11\7\1\1\10"+
    "\3\0\34\1\5\11\5\1\2\0\11\1\1\0\1\1"+
    "\1\0\35\1\1\0\42\1\1\0\13\1\1\11\15\1"+
    "\1\0\24\1\1\0\5\1\1\11\4\1\1\0\6\1"+
    "\1\0\1\11\3\0\1\1\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[250];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SimpleLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 38: break;
          case 2: 
            { 
            } 
            // fall through
          case 39: break;
          case 3: 
            { yybegin(YYINITIAL); return SimpleTypes.NUMBER;
            } 
            // fall through
          case 40: break;
          case 4: 
            { yybegin(YYINITIAL); return SimpleTypes.TYPENAME;
            } 
            // fall through
          case 41: break;
          case 5: 
            { yybegin(YYINITIAL); return SimpleTypes.DATANAME;
            } 
            // fall through
          case 42: break;
          case 6: 
            { yybegin(YYINITIAL); return SimpleTypes.ENDCOMMAND;
            } 
            // fall through
          case 43: break;
          case 7: 
            { yybegin(YYINITIAL); return SimpleTypes.CONDITIONOPERATOR;
            } 
            // fall through
          case 44: break;
          case 8: 
            { yybegin(YYINITIAL); return SimpleTypes.EQ;
            } 
            // fall through
          case 45: break;
          case 9: 
            { yybegin(YYINITIAL); return SimpleTypes.OPENBRACKET;
            } 
            // fall through
          case 46: break;
          case 10: 
            { yybegin(YYINITIAL); return SimpleTypes.CLOSEBRACKET;
            } 
            // fall through
          case 47: break;
          case 11: 
            { yybegin(YYINITIAL); return SimpleTypes.COMMA;
            } 
            // fall through
          case 48: break;
          case 12: 
            { yybegin(YYINITIAL); return SimpleTypes.CONDITIONBOOLOPERATOR;
            } 
            // fall through
          case 49: break;
          case 13: 
            { yybegin(YYINITIAL); return SimpleTypes.IF;
            } 
            // fall through
          case 50: break;
          case 14: 
            { yybegin(YYINITIAL); return SimpleTypes.UNARYOPERATOR;
            } 
            // fall through
          case 51: break;
          case 15: 
            { yybegin(YYINITIAL); return SimpleTypes.PLUSEQ;
            } 
            // fall through
          case 52: break;
          case 16: 
            { yybegin(YYINITIAL); return SimpleTypes.MINUSEQ;
            } 
            // fall through
          case 53: break;
          case 17: 
            { yybegin(YYINITIAL); return SimpleTypes.DQ_STRING;
            } 
            // fall through
          case 54: break;
          case 18: 
            { yybegin(YYINITIAL); return SimpleTypes.ENDSTATEMENT;
            } 
            // fall through
          case 55: break;
          case 19: 
            { yybegin(YYINITIAL); return SimpleTypes.CONDITIONUNARYPERATOR;
            } 
            // fall through
          case 56: break;
          case 20: 
            { yybegin(YYINITIAL); return SimpleTypes.ELSE;
            } 
            // fall through
          case 57: break;
          case 21: 
            { yybegin(YYINITIAL); return SimpleTypes.BOOLEAN;
            } 
            // fall through
          case 58: break;
          case 22: 
            { yybegin(YYINITIAL); return SimpleTypes.TYPE;
            } 
            // fall through
          case 59: break;
          case 23: 
            { yybegin(YYINITIAL); return SimpleTypes.NULL;
            } 
            // fall through
          case 60: break;
          case 24: 
            { yybegin(YYINITIAL); return SimpleTypes.WRITE;
            } 
            // fall through
          case 61: break;
          case 25: 
            { yybegin(YYINITIAL); return SimpleTypes.WHILE;
            } 
            // fall through
          case 62: break;
          case 26: 
            { yybegin(YYINITIAL); return SimpleTypes.DATADEF;
            } 
            // fall through
          case 63: break;
          case 27: 
            { yybegin(YYINITIAL); return SimpleTypes.STARTSTATEMENT;
            } 
            // fall through
          case 64: break;
          case 28: 
            { yybegin(YYINITIAL); return SimpleTypes.BREAK;
            } 
            // fall through
          case 65: break;
          case 29: 
            { yybegin(YYINITIAL); return SimpleTypes.RETURN;
            } 
            // fall through
          case 66: break;
          case 30: 
            { yybegin(YYINITIAL); return SimpleTypes.PARENT;
            } 
            // fall through
          case 67: break;
          case 31: 
            { yybegin(YYINITIAL); return SimpleTypes.STATIC;
            } 
            // fall through
          case 68: break;
          case 32: 
            { yybegin(YYINITIAL); return SimpleTypes.VALUES;
            } 
            // fall through
          case 69: break;
          case 33: 
            { yybegin(YYINITIAL); return SimpleTypes.SYSTEMDEF;
            } 
            // fall through
          case 70: break;
          case 34: 
            { yybegin(YYINITIAL); return SimpleTypes.CONTINUE;
            } 
            // fall through
          case 71: break;
          case 35: 
            { yybegin(YYINITIAL); return SimpleTypes.FUNCTION;
            } 
            // fall through
          case 72: break;
          case 36: 
            { yybegin(YYINITIAL); return SimpleTypes.CONSTANTDEF;
            } 
            // fall through
          case 73: break;
          case 37: 
            { yybegin(YYINITIAL); return SimpleTypes.DATE;
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
