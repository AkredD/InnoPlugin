{
  parserClass="com.inno.plugin.parser.InnoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Inno"
  psiImplClassSuffix="Impl"
  psiPackage="com.inno.plugin.psi"
  psiImplPackage="com.inno.plugin.psi.impl"

  elementTypeHolderClass="com.inno.plugin.psi.SimpleTypes"
  elementTypeClass="com.inno.plugin.psi.ElementType"
  tokenTypeClass="com.inno.plugin.psi.TokenType"
}

simpleFile          ::= typeBlock EOF

dataName			::= (OPENBRACKET TYPENAME CLOSEBRACKET)? DATANAME

varValue            ::= (NULL | dataName | BOOLEAN | NUMBER | DQ_STRING | DATE | callStatement | expression | condition)

condition           ::= condition CONDITIONBOOLOPERATOR condition
                        | boolExpression
                        | OPENBRACKET (condition | boolExpression) CLOSEBRACKET
                        | (CONDITIONUNARYPERATOR | CONDITIONBOOLOPERATOR) condition
                        | boolExpression CONDITIONBOOLOPERATOR condition
                        | condition CONDITIONBOOLOPERATOR boolExpression
                        | (BOOLEAN | dataName | callStatement)


boolExpression      ::=   OPENBRACKET boolExpression CLOSEBRACKET
                        | expression CONDITIONOPERATOR expression
                        | (DQ_STRING | NUMBER | DATE | dataName | callStatement)

expression          ::= OPENBRACKET expression CLOSEBRACKET
                        | expression OPERATOR expression
                        | (UNARYOPERATOR | OPERATOR) expression
                        | (DQ_STRING | NUMBER | DATE | dataName | callStatement)

ifStatement         ::= IF OPENBRACKET condition CLOSEBRACKET
                        (
                          STARTSTATEMENT ENDCOMMAND
                            (statement)*
                          ENDSTATEMENT ENDCOMMAND
                        )
                        ( ELSE
                          STARTSTATEMENT ENDCOMMAND
                            (statement)*
                          ENDSTATEMENT ENDCOMMAND
                        )?

whileStatement      ::= WHILE OPENBRACKET condition CLOSEBRACKET
                        (
                          STARTSTATEMENT ENDCOMMAND
                            (statement)*
                          ENDSTATEMENT ENDCOMMAND
                        )

eqStatement         ::= DATANAME EQ varValue ENDCOMMAND

plusEqStatement      ::= DATANAME PLUSEQ  varValue ENDCOMMAND

minusEqStatement     ::= DATANAME MINUSEQ varValue ENDCOMMAND

returnStatement     ::= RETURN varValue ENDCOMMAND

continueStatement   ::= CONTINUE ENDCOMMAND

breakStatement      ::= BREAK ENDCOMMAND

callStatement       ::= CALL ((TYPENAME | dataName) ENDCOMMAND)? DATANAME
                      OPENBRACKET
                      (varValue (COMMA varValue)*)?
                      CLOSEBRACKET

writeStatement      ::= WRITE OPENBRACKET (varValue (COMMA varValue)*)? CLOSEBRACKET ENDCOMMAND

statement   ::=   (ifStatement
                | returnStatement
                | continueStatement
                | breakStatement
                | whileStatement
                | dataDef
                | constantDef
                | systemDef
                | eqStatement
                | plusEqStatement
                | minusEqStatement
                | (TYPENAME)? callStatement ENDCOMMAND
                | writeStatement
                | COMMENTS
                | WS)

functionBlock    ::=
                FUNCTION TYPENAME DATANAME
                        OPENBRACKET
                        ((TYPENAME DATANAME COMMA)* TYPENAME DATANAME)?
                        CLOSEBRACKET
                STARTSTATEMENT ENDCOMMAND
                    (statement)+
                ENDSTATEMENT ENDCOMMAND

staticBlock ::= STATIC OPENBRACKET (varDefinition)+ CLOSEBRACKET

typeBlock        ::=
            TYPE TYPENAME (PARENT TYPENAME)? ENDCOMMAND
                staticBlock?
                (functionBlock)+
                ENDSTATEMENT ENDCOMMAND

varDefinition   ::= dataDef | constantDef | systemDef

dataDef         ::= DATADEF TYPENAME DATANAME (VALUES OPENBRACKET (varValue (COMMA varValue)*)? CLOSEBRACKET)? ENDCOMMAND

constantDef     ::= CONSTANTDEF TYPENAME DATANAME VALUES OPENBRACKET (varValue (COMMA varValue)*)? CLOSEBRACKET ENDCOMMAND

systemDef       ::= SYSTEMDEF TYPENAME DATANAME ENDCOMMAND